/* Auto-generated by genmsg_cpp for file /home/obot/ros/raiti_ws/pr2_joint_trajectory_bridge/msg/JointTrajectoryPointBridge.msg */
#ifndef PR2_JOINT_TRAJECTORY_BRIDGE_MESSAGE_JOINTTRAJECTORYPOINTBRIDGE_H
#define PR2_JOINT_TRAJECTORY_BRIDGE_MESSAGE_JOINTTRAJECTORYPOINTBRIDGE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace pr2_joint_trajectory_bridge
{
template <class ContainerAllocator>
struct JointTrajectoryPointBridge_ {
  typedef JointTrajectoryPointBridge_<ContainerAllocator> Type;

  JointTrajectoryPointBridge_()
  : positions()
  , velocities()
  , accelerations()
  , effort()
  , time_from_start()
  {
  }

  JointTrajectoryPointBridge_(const ContainerAllocator& _alloc)
  : positions(_alloc)
  , velocities(_alloc)
  , accelerations(_alloc)
  , effort(_alloc)
  , time_from_start()
  {
  }

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _positions_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  positions;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _velocities_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  velocities;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _accelerations_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  accelerations;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _effort_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  effort;

  typedef ros::Duration _time_from_start_type;
  ros::Duration time_from_start;


  typedef boost::shared_ptr< ::pr2_joint_trajectory_bridge::JointTrajectoryPointBridge_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pr2_joint_trajectory_bridge::JointTrajectoryPointBridge_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct JointTrajectoryPointBridge
typedef  ::pr2_joint_trajectory_bridge::JointTrajectoryPointBridge_<std::allocator<void> > JointTrajectoryPointBridge;

typedef boost::shared_ptr< ::pr2_joint_trajectory_bridge::JointTrajectoryPointBridge> JointTrajectoryPointBridgePtr;
typedef boost::shared_ptr< ::pr2_joint_trajectory_bridge::JointTrajectoryPointBridge const> JointTrajectoryPointBridgeConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::pr2_joint_trajectory_bridge::JointTrajectoryPointBridge_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::pr2_joint_trajectory_bridge::JointTrajectoryPointBridge_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace pr2_joint_trajectory_bridge

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::pr2_joint_trajectory_bridge::JointTrajectoryPointBridge_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::pr2_joint_trajectory_bridge::JointTrajectoryPointBridge_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::pr2_joint_trajectory_bridge::JointTrajectoryPointBridge_<ContainerAllocator> > {
  static const char* value() 
  {
    return "f3cd1e1c4d320c79d6985c904ae5dcd3";
  }

  static const char* value(const  ::pr2_joint_trajectory_bridge::JointTrajectoryPointBridge_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xf3cd1e1c4d320c79ULL;
  static const uint64_t static_value2 = 0xd6985c904ae5dcd3ULL;
};

template<class ContainerAllocator>
struct DataType< ::pr2_joint_trajectory_bridge::JointTrajectoryPointBridge_<ContainerAllocator> > {
  static const char* value() 
  {
    return "pr2_joint_trajectory_bridge/JointTrajectoryPointBridge";
  }

  static const char* value(const  ::pr2_joint_trajectory_bridge::JointTrajectoryPointBridge_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::pr2_joint_trajectory_bridge::JointTrajectoryPointBridge_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float64[] positions\n\
float64[] velocities\n\
float64[] accelerations\n\
float64[] effort\n\
duration time_from_start\n\
\n\
";
  }

  static const char* value(const  ::pr2_joint_trajectory_bridge::JointTrajectoryPointBridge_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::pr2_joint_trajectory_bridge::JointTrajectoryPointBridge_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.positions);
    stream.next(m.velocities);
    stream.next(m.accelerations);
    stream.next(m.effort);
    stream.next(m.time_from_start);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct JointTrajectoryPointBridge_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pr2_joint_trajectory_bridge::JointTrajectoryPointBridge_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::pr2_joint_trajectory_bridge::JointTrajectoryPointBridge_<ContainerAllocator> & v) 
  {
    s << indent << "positions[]" << std::endl;
    for (size_t i = 0; i < v.positions.size(); ++i)
    {
      s << indent << "  positions[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.positions[i]);
    }
    s << indent << "velocities[]" << std::endl;
    for (size_t i = 0; i < v.velocities.size(); ++i)
    {
      s << indent << "  velocities[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.velocities[i]);
    }
    s << indent << "accelerations[]" << std::endl;
    for (size_t i = 0; i < v.accelerations.size(); ++i)
    {
      s << indent << "  accelerations[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.accelerations[i]);
    }
    s << indent << "effort[]" << std::endl;
    for (size_t i = 0; i < v.effort.size(); ++i)
    {
      s << indent << "  effort[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.effort[i]);
    }
    s << indent << "time_from_start: ";
    Printer<ros::Duration>::stream(s, indent + "  ", v.time_from_start);
  }
};


} // namespace message_operations
} // namespace ros

#endif // PR2_JOINT_TRAJECTORY_BRIDGE_MESSAGE_JOINTTRAJECTORYPOINTBRIDGE_H

