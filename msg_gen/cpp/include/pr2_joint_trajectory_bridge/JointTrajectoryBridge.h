/* Auto-generated by genmsg_cpp for file /home/obot/ros/raiti_ws/pr2_joint_trajectory_bridge/msg/JointTrajectoryBridge.msg */
#ifndef PR2_JOINT_TRAJECTORY_BRIDGE_MESSAGE_JOINTTRAJECTORYBRIDGE_H
#define PR2_JOINT_TRAJECTORY_BRIDGE_MESSAGE_JOINTTRAJECTORYBRIDGE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"
#include "pr2_joint_trajectory_bridge/JointTrajectoryPointBridge.h"

namespace pr2_joint_trajectory_bridge
{
template <class ContainerAllocator>
struct JointTrajectoryBridge_ {
  typedef JointTrajectoryBridge_<ContainerAllocator> Type;

  JointTrajectoryBridge_()
  : header()
  , joint_names()
  , points()
  {
  }

  JointTrajectoryBridge_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , joint_names(_alloc)
  , points(_alloc)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _joint_names_type;
  std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  joint_names;

  typedef std::vector< ::pr2_joint_trajectory_bridge::JointTrajectoryPointBridge_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::pr2_joint_trajectory_bridge::JointTrajectoryPointBridge_<ContainerAllocator> >::other >  _points_type;
  std::vector< ::pr2_joint_trajectory_bridge::JointTrajectoryPointBridge_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::pr2_joint_trajectory_bridge::JointTrajectoryPointBridge_<ContainerAllocator> >::other >  points;


  typedef boost::shared_ptr< ::pr2_joint_trajectory_bridge::JointTrajectoryBridge_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pr2_joint_trajectory_bridge::JointTrajectoryBridge_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct JointTrajectoryBridge
typedef  ::pr2_joint_trajectory_bridge::JointTrajectoryBridge_<std::allocator<void> > JointTrajectoryBridge;

typedef boost::shared_ptr< ::pr2_joint_trajectory_bridge::JointTrajectoryBridge> JointTrajectoryBridgePtr;
typedef boost::shared_ptr< ::pr2_joint_trajectory_bridge::JointTrajectoryBridge const> JointTrajectoryBridgeConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::pr2_joint_trajectory_bridge::JointTrajectoryBridge_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::pr2_joint_trajectory_bridge::JointTrajectoryBridge_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace pr2_joint_trajectory_bridge

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::pr2_joint_trajectory_bridge::JointTrajectoryBridge_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::pr2_joint_trajectory_bridge::JointTrajectoryBridge_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::pr2_joint_trajectory_bridge::JointTrajectoryBridge_<ContainerAllocator> > {
  static const char* value() 
  {
    return "65b4f94a94d1ed67169da35a02f33d3f";
  }

  static const char* value(const  ::pr2_joint_trajectory_bridge::JointTrajectoryBridge_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x65b4f94a94d1ed67ULL;
  static const uint64_t static_value2 = 0x169da35a02f33d3fULL;
};

template<class ContainerAllocator>
struct DataType< ::pr2_joint_trajectory_bridge::JointTrajectoryBridge_<ContainerAllocator> > {
  static const char* value() 
  {
    return "pr2_joint_trajectory_bridge/JointTrajectoryBridge";
  }

  static const char* value(const  ::pr2_joint_trajectory_bridge::JointTrajectoryBridge_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::pr2_joint_trajectory_bridge::JointTrajectoryBridge_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Header header\n\
string[] joint_names\n\
JointTrajectoryPointBridge[] points\n\
# JointTrajectoryPoint[] points\n\
# copied from /opt/ros/hydro/share/trajectory_msgs/msg\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: pr2_joint_trajectory_bridge/JointTrajectoryPointBridge\n\
float64[] positions\n\
float64[] velocities\n\
float64[] accelerations\n\
float64[] effort\n\
duration time_from_start\n\
\n\
";
  }

  static const char* value(const  ::pr2_joint_trajectory_bridge::JointTrajectoryBridge_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::pr2_joint_trajectory_bridge::JointTrajectoryBridge_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::pr2_joint_trajectory_bridge::JointTrajectoryBridge_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::pr2_joint_trajectory_bridge::JointTrajectoryBridge_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.joint_names);
    stream.next(m.points);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct JointTrajectoryBridge_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pr2_joint_trajectory_bridge::JointTrajectoryBridge_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::pr2_joint_trajectory_bridge::JointTrajectoryBridge_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "joint_names[]" << std::endl;
    for (size_t i = 0; i < v.joint_names.size(); ++i)
    {
      s << indent << "  joint_names[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.joint_names[i]);
    }
    s << indent << "points[]" << std::endl;
    for (size_t i = 0; i < v.points.size(); ++i)
    {
      s << indent << "  points[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::pr2_joint_trajectory_bridge::JointTrajectoryPointBridge_<ContainerAllocator> >::stream(s, indent + "    ", v.points[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // PR2_JOINT_TRAJECTORY_BRIDGE_MESSAGE_JOINTTRAJECTORYBRIDGE_H

